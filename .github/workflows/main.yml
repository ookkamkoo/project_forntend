name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
    
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     # Login Docker
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     # Set up Docker Buildx
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     # Build and push docker hub
  #     - name: Build and push docker hub
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKER_NAME }}/project_csn:backOfice_1
  
  deploy:
    runs-on: ubuntu-latest
    # needs: build 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD CLI
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd
          argocd version --client  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ArgoCD ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

      - name: Login to ArgoCD (HTTP)
        run: |
          argocd login 139.59.193.21 --username admin --password "@Asdf1@asdf@asdf" --insecure


      # ‚úÖ Sync Application ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Build ‡πÄ‡∏™‡∏£‡πá‡∏à
      - name: Sync ArgoCD Application
        run: |
          argocd app sync play --prune --force
          argocd app wait play --health
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # ‚úÖ ‡πÉ‡∏ä‡πâ KUBECONFIG ‡∏à‡∏≤‡∏Å Secret
  #     - name: Set up KUBECONFIG
  #       run: |
  #         mkdir -p $HOME/.kube
  #         echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config
  #         export KUBECONFIG=$HOME/.kube/config
  #         chmod 600 $HOME/.kube/config
  #         echo "‚úÖ KUBECONFIG set up successfully."
          

  #     # # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Image ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å Cluster
  #     - name: Deploy to all clusters
  #       run: |
  #           kubectl delete pod -l app=backoffice
  #           kubectl set image deployment/backoffice backoffice=${{ secrets.DOCKER_NAME }}/project_csn:backOfice_1
  #           kubectl rollout status deployment/backoffice

  #       # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Context ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Kubernetes
  #     - name: Check Kubernetes Connection
  #       run: |
  #         echo "üîç Checking available Kubernetes contexts..."
  #         kubectl config get-contexts || echo "‚ö†Ô∏è Failed to retrieve contexts"

  #         echo "üîç Checking current Kubernetes context..."
  #         kubectl config current-context || echo "‚ö†Ô∏è No context is set"

  #         echo "üîç Checking cluster information..."
  #         kubectl cluster-info || echo "‚ùå Failed to connect to Kubernetes API server"

  #     # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Pods ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å Namespace
  #     - name: Show all running pods
  #       run: |
  #         echo "üîç Showing all running Pods..."
  #         kubectl get pods --all-namespaces -o wide || echo "‚ö†Ô∏è Failed to retrieve pods"



      